import java_cup.runtime.*;

parser code {:
    scanner s;
    java.util.HashMap<String, Integer> vars = new java.util.HashMap<>();
    parser(scanner s) { this.s = s; }
:}

scan with {:
    return s.next_token();
:};

terminal SEMI, PLUS, MINUS, TIMES, UMINUS, LPAREN, RPAREN, SE, RETORNAR, ASSIGN, LBRACE, RBRACE;
terminal Integer NUMBER;
terminal String ID;

non terminal stmt_list;
non terminal stmt;
non terminal Integer expr;

precedence left PLUS, MINUS;
precedence left TIMES;
precedence left UMINUS;

start with stmt_list;

stmt_list ::= stmt_list stmt 
           | stmt ;

stmt ::= expr:e SEMI {: System.out.println("Expr: " + e); :} 
       | RETORNAR expr:e SEMI {: System.out.println("Retorno: " + e); System.exit(0); :} 
       | ID:id ASSIGN expr:e SEMI {: vars.put(id, e); :} 
       | SE LPAREN expr:cond RPAREN LBRACE stmt_list RBRACE 
           {: if (cond != 0) { /* stmt_list já foi executado */ } else { System.out.println("SE ignorado: condição falsa " + cond); } :} ;

expr ::= expr:e1 PLUS expr:e2 {: RESULT = e1 + e2; :} 
       | expr:e1 MINUS expr:e2 {: RESULT = e1 - e2; :} 
       | expr:e1 TIMES expr:e2 {: RESULT = e1 * e2; :} 
       | MINUS expr:e {: RESULT = -e; :} %prec UMINUS 
       | LPAREN expr:e RPAREN {: RESULT = e; :} 
       | NUMBER:n {: RESULT = n; :} 
       | ID:id {: RESULT = vars.getOrDefault(id, 0); :} ;
