import java_cup.runtime.*;

parser code {:
    scanner s;
    java.util.HashMap<String, Integer> vars = new java.util.HashMap<>();
    parser(scanner s) { this.s = s; }
:}

scan with {:
    return s.next_token();
:};

terminal SEMI, PLUS, COMP, MINUS, TIMES, UMINUS, LPAREN, RPAREN, SE, RETORNAR, ASSIGN, LBRACE, RBRACE, ESCREVER;
terminal Integer NUMBER;
terminal String ID;

non terminal stmt_list;
non terminal stmt;
non terminal Integer expr;

precedence left PLUS, MINUS;
precedence left TIMES;
precedence left UMINUS;

start with stmt_list;

stmt_list ::= stmt_list stmt 
           | stmt ;

/*statements*/
stmt ::= expr:e {:
            RESULT = e; 
        :}
        | ID:id ASSIGN expr:e SEMI {: 
            vars.put(id, e);
            System.out.println("Variavel criada com sucesso"); 
            RESULT = e; 
        :} 
        | SE LPAREN expr:cond RPAREN LBRACE stmt_list:list  RBRACE  
        {: 
            if (cond != 0) { 
                RESULT = list;
            } else { 
                System.out.println("Condição falsa"); 
                RESULT = null;
            };
        :}
        | RETORNAR stmt:s SEMI {: 
            System.out.println("Retorno: " + s); System.exit(0); 
        :} 
        | ESCREVER LPAREN stmt:s RPAREN SEMI {: 
                System.out.println(s); 
        :} ;

expr ::= expr:e1 PLUS expr:e2   {: RESULT = e1 + e2; :} 
       | expr:e1 MINUS expr:e2  {: RESULT = e1 - e2; :} 
       | expr:e1 TIMES expr:e2  {: RESULT = e1 * e2; :} 
       | expr:e1 COMP expr:e2   {: RESULT = (e1.equals(e2)) ? 1 : 0; :} 
       | MINUS expr:e           {: RESULT = -e; :} %prec UMINUS 
       | LPAREN expr:e RPAREN   {: RESULT = e; :} 
       | NUMBER:n               {: RESULT = n; :} 
       | ID:id                  {: RESULT = vars.getOrDefault(id, 0); :} ;
